{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BjX-mj9e8D5a","outputId":"30e4bbf4-fe03-460a-8094-d5e7e29c9fd1","executionInfo":{"status":"ok","timestamp":1728651654325,"user_tz":-120,"elapsed":8945,"user":{"displayName":"","userId":""}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pulp\n","  Downloading PuLP-2.9.0-py3-none-any.whl.metadata (5.4 kB)\n","Downloading PuLP-2.9.0-py3-none-any.whl (17.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.7/17.7 MB\u001b[0m \u001b[31m44.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pulp\n","Successfully installed pulp-2.9.0\n"]}],"source":["!pip install pulp\n","\n","#!sudo apt-get install coinor-cbc glpk-utils coinor-clp\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HMGiufp89W-9"},"outputs":[],"source":["### kod sprawdza czy instalacja się udała\n","import pulp\n","\n","#print(pulp.___version___)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05p9Frax-V2f","outputId":"38a5da09-653b-4c73-e3f1-25e078e9a586","executionInfo":{"status":"ok","timestamp":1728651732752,"user_tz":-120,"elapsed":55164,"user":{"displayName":"","userId":""}}},"outputs":[{"output_type":"stream","name":"stderr","text":["ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"]},{"output_type":"stream","name":"stdout","text":["Available solvers: ['PULP_CBC_CMD']\n","Unavailable solvers: {'COINMP_DLL', 'CPLEX_PY', 'MOSEK', 'CPLEX_CMD', 'FSCIP_CMD', 'HiGHS', 'SCIP_CMD', 'SCIP_PY', 'COPT', 'PYGLPK', 'XPRESS', 'HiGHS_CMD', 'CHOCO_CMD', 'COPT_DLL', 'GUROBI', 'GLPK_CMD', 'COIN_CMD', 'GUROBI_CMD', 'XPRESS_PY', 'COPT_CMD', 'MIPCL_CMD'}\n"]},{"output_type":"stream","name":"stderr","text":["ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss................................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n","----------------------------------------------------------------------\n","Ran 1348 tests in 54.248s\n","\n","OK (skipped=1284)\n"]}],"source":["pulp.pulpTestAll()"]},{"cell_type":"markdown","metadata":{"id":"JHP3Y3Yh-stH"},"source":["# Zadania:\n","\n","1. przeczytaj materiały dotyczące pulp ze strony internetowej https://coin-or.github.io/pulp/main/index.html oraz przejdź przez blending problem (przepisz do swojego notebooka)\n","\n","2. w blending problem dodaj zmienną decyzyjną. Stwórz zmienną która pojawi się w końcowym składzie produktu (tj. wartość zmiennej będzie miała niezerową postać)\n","\n","3. Dodaj ograniczenie co do zawartości witaminy B\n","\n","Zawartość:\n","\n","| Nazwa      | zawartość ug/100g |\n","|------------|-------------------|\n","| chicken    | 0.3               |\n","| beef       | 2.6               |\n","| mutton     | 2.6               |\n","| rice       | 0                 |\n","| wheat bran | 0                 |\n","| gel        | 0                 |\n","| sardines   | 8.9               |\n","\n","Kot ma zjeść minimum 0.24 ug na kilogram masy więc około\n","0.8 ug dziennie\n","\n","4. Na końcu ma pojawiać się zdanie podsumowujące wynik, w stylu:\n","Końcowy produkt będzie kosztować {}, będzie miał w składzie {nazwa}: {} %, {nastepna nazwa}: {} %\n","\n","Takie zdanie można skleić z części generowanych automatycznie:\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BhWf9b8IMJZ7","outputId":"d00b41c6-c19e-4727-ada6-60752fc89905","executionInfo":{"status":"ok","timestamp":1728651800145,"user_tz":-120,"elapsed":419,"user":{"displayName":"","userId":""}}},"outputs":[{"output_type":"stream","name":"stdout","text":["['jabłko:5', 'banan:10']\n","jabłko:5, banan:10\n"]}],"source":["# Tworzenie listy par \"produkt:cena\" poprzez połączenie nazw produktów z ich cenami\n","sklejone_produkt_cena = [\":\".join((produkt, str(cena))) for produkt,cena in zip([\"jabłko\",\"banan\"],[5,10])]\n","print(sklejone_produkt_cena)# Wyświetlenie listy połączonych produktów i cen\n","# Połączenie elementów listy w jeden ciąg znaków, oddzielony przecinkami i spacjami\n","sklejona_calosc = \", \".join(sklejone_produkt_cena)\n","\n","print(sklejona_calosc)# Wyświetlenie całości jako jednego łańcucha tekstowego"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Se_t7o8bTLdW"},"outputs":[],"source":["from pulp import *# Importowanie biblioteki Pulp do optymalizacji liniowej\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oYdPtz40qnfQ","executionInfo":{"status":"ok","timestamp":1728651829244,"user_tz":-120,"elapsed":405,"user":{"displayName":"","userId":""}},"outputId":"af83e418-a083-4d44-b8d6-eee7690f9773","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["sztukA = 6000.0\n","sztukB = -9.094947e-13\n","sztukC = 0.0\n","Całkowity zysk =  2399999.9999999995\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pulp/pulp.py:1298: UserWarning: Spaces are not permitted in the name. Converted to '_'\n","  warnings.warn(\"Spaces are not permitted in the name. Converted to '_'\")\n"]}],"source":["prob = LpProblem(\"Produkcja problem\",LpMaximize)# Tworzenie problemu optymalizacyjnego o nazwie \"Produkcja problem\" z celem maksymalizacji zysku\n","# Definiowanie zmiennych decyzyjnych:\n","sztukA=LpVariable(\"sztukA\",0,None,LpInteger)# sztukA - liczba sztuk produktu A (zmienna całkowitoliczbowa, >= 0)\n","sztukB=LpVariable(\"sztukB\",0)# sztukB - liczba sztuk produktu B (zmienna nieujemna)\n","sztukC=LpVariable(\"sztukC\",0)# sztukC - liczba sztuk produktu C (zmienna nieujemna)\n","\n","# Funkcja celu: maksymalizacja zysku\n","prob += 400*sztukA + 300*sztukB +200*sztukC, \"Optymalizacja zysku\"\n","prob += 0.3*sztukA + 0.5*sztukB+0.4*sztukC <= 1800, \"Montaż godzin\"#    Całkowity dostępny czas montażu to 1800 godzin\n","prob += 0.1*sztukA + 0.08*sztukB+0.04*sztukC <= 800, \"Kontrola godzin\"#    Całkowity dostępny czas kontroli to 800 godzin\n","prob += 0.06*sztukA + 0.04*sztukB+0.05*sztukC <= 700, \"Pakowanie godzin\"#    Całkowity dostępny czas pakowania to 700 godzin\n","prob.writeLP(\"Kontrola.lp\")# Zapisanie problemu do pliku LP (dla ewentualnej analizy)\n","prob.solve()# Rozwiązanie problemu optymalizacji\n","\n","for v in prob.variables():# Wyświetlenie wartości zmiennych decyzyjnych w rozwiązaniu optymalnym\n","    print(v.name, \"=\", v.varValue)\n","print(\"Całkowity zysk = \", value(prob.objective))# Wyświetlenie maksymalnego całkowitego zysku\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pXWfNddvqnfR","executionInfo":{"status":"ok","timestamp":1728652496878,"user_tz":-120,"elapsed":413,"user":{"displayName":"","userId":""}},"outputId":"ec745bb0-ed0a-4c1d-d6c1-f748db32c866","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Status: Optimal\n","Ingr_BEEF = 60.0\n","Ingr_CHICKEN = 0.0\n","Ingr_GEL = 40.0\n","Ingr_MUTTON = 0.0\n","Ingr_RICE = 0.0\n","Ingr_WHEAT = 0.0\n","Total Cost of Ingredients per can =  0.52\n"]}],"source":["# Import PuLP modeler functions\n","from pulp import *\n","\n","# Creates a list of the Ingredients\n","Ingredients = [\"CHICKEN\", \"BEEF\", \"MUTTON\", \"RICE\", \"WHEAT\", \"GEL\"]\n","\n","# A dictionary of the costs of each of the Ingredients is created\n","costs = {\n","    \"CHICKEN\": 0.013,\n","    \"BEEF\": 0.008,\n","    \"MUTTON\": 0.010,\n","    \"RICE\": 0.002,\n","    \"WHEAT\": 0.005,\n","    \"GEL\": 0.001,\n","    \"SARDINES\" : 0.004,\n","}\n","\n","# A dictionary of the protein percent in each of the Ingredients is created\n","proteinPercent = {\n","    \"CHICKEN\": 0.100,\n","    \"BEEF\": 0.200,\n","    \"MUTTON\": 0.150,\n","    \"RICE\": 0.000,\n","    \"WHEAT\": 0.040,\n","    \"GEL\": 0.000,\n","    \"SARDINES\" : 0.004,\n","}\n","\n","# A dictionary of the fat percent in each of the Ingredients is created\n","fatPercent = {\n","    \"CHICKEN\": 0.080,\n","    \"BEEF\": 0.100,\n","    \"MUTTON\": 0.110,\n","    \"RICE\": 0.010,\n","    \"WHEAT\": 0.010,\n","    \"GEL\": 0.000,\n","}\n","\n","# A dictionary of the fibre percent in each of the Ingredients is created\n","fibrePercent = {\n","    \"CHICKEN\": 0.001,\n","    \"BEEF\": 0.005,\n","    \"MUTTON\": 0.003,\n","    \"RICE\": 0.100,\n","    \"WHEAT\": 0.150,\n","    \"GEL\": 0.000,\n","}\n","\n","# A dictionary of the salt percent in each of the Ingredients is created\n","saltPercent = {\n","    \"CHICKEN\": 0.002,\n","    \"BEEF\": 0.005,\n","    \"MUTTON\": 0.007,\n","    \"RICE\": 0.002,\n","    \"WHEAT\": 0.008,\n","    \"GEL\": 0.000,\n","}\n","\n","# Create the 'prob' variable to contain the problem data\n","prob = LpProblem(\"The Whiskas Problem\", LpMinimize)\n","\n","# A dictionary called 'ingredient_vars' is created to contain the referenced Variables\n","ingredient_vars = LpVariable.dicts(\"Ingr\", Ingredients, 0)\n","\n","# The objective function is added to 'prob' first\n","prob += (\n","    lpSum([costs[i] * ingredient_vars[i] for i in Ingredients]),\n","    \"Total Cost of Ingredients per can\",\n",")\n","\n","# The five constraints are added to 'prob'\n","prob += lpSum([ingredient_vars[i] for i in Ingredients]) == 100, \"PercentagesSum\"\n","prob += (\n","    lpSum([proteinPercent[i] * ingredient_vars[i] for i in Ingredients]) >= 8.0,\n","    \"ProteinRequirement\",\n",")\n","prob += (\n","    lpSum([fatPercent[i] * ingredient_vars[i] for i in Ingredients]) >= 6.0,\n","    \"FatRequirement\",\n",")\n","prob += (\n","    lpSum([fibrePercent[i] * ingredient_vars[i] for i in Ingredients]) <= 2.0,\n","    \"FibreRequirement\",\n",")\n","prob += (\n","    lpSum([saltPercent[i] * ingredient_vars[i] for i in Ingredients]) <= 0.4,\n","    \"SaltRequirement\",\n",")\n","\n","# The problem data is written to an .lp file\n","prob.writeLP(\"WhiskasModel2.lp\")\n","\n","# The problem is solved using PuLP's choice of Solver\n","prob.solve()\n","\n","# The status of the solution is printed to the screen\n","print(\"Status:\", LpStatus[prob.status])\n","\n","# Each of the variables is printed with it's resolved optimum value\n","for v in prob.variables():\n","    print(v.name, \"=\", v.varValue)\n","\n","# The optimised objective function value is printed to the screen\n","print(\"Total Cost of Ingredients per can = \", value(prob.objective))"]},{"cell_type":"code","source":["# Import PuLP modeler functions\n","from pulp import *\n","\n","# Create the 'prob' variable to contain the problem data\n","prob = LpProblem(\"The Whiskas Problem\", LpMinimize)\n","\n","# The 2 variables Beef and Chicken are created with a lower limit of zero\n","x1 = LpVariable(\"ChickenPercent\", 0, None, LpInteger)\n","x2 = LpVariable(\"BeefPercent\", 0)\n","\n","# The objective function is added to 'prob' first\n","prob += 0.013 * x1 + 0.008 * x2, \"Total Cost of Ingredients per can\"\n","\n","# The five constraints are entered\n","prob += x1 + x2 == 100, \"PercentagesSum\"\n","prob += 0.100 * x1 + 0.200 * x2 >= 8.0, \"ProteinRequirement\"\n","prob += 0.080 * x1 + 0.100 * x2 >= 6.0, \"FatRequirement\"\n","prob += 0.001 * x1 + 0.005 * x2 <= 2.0, \"FibreRequirement\"\n","prob += 0.002 * x1 + 0.005 * x2 <= 0.4, \"SaltRequirement\"\n","\n","# The problem data is written to an .lp file\n","prob.writeLP(\"WhiskasModel.lp\")\n","\n","# The problem is solved using PuLP's choice of Solver\n","prob.solve()\n","\n","# The status of the solution is printed to the screen\n","print(\"Status:\", LpStatus[prob.status])\n","\n","# Each of the variables is printed with it's resolved optimum value\n","for v in prob.variables():\n","    print(v.name, \"=\", v.varValue)\n","\n","# The optimised objective function value is printed to the screen\n","print(\"Total Cost of Ingredients per can = \", value(prob.objective))"],"metadata":{"id":"8HEQ4BdIvMck","executionInfo":{"status":"ok","timestamp":1728652827488,"user_tz":-120,"elapsed":434,"user":{"displayName":"","userId":""}},"outputId":"c5dad9e3-c9d8-4716-e361-f04d5ea6c66f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Status: Optimal\n","BeefPercent = 66.0\n","ChickenPercent = 34.0\n","Total Cost of Ingredients per can =  0.97\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/AdoHaha/misp/blob/master/instalacja_pierwsze_cwiczenia_z_Pulp.ipynb","timestamp":1728653879860}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"nbformat":4,"nbformat_minor":0}